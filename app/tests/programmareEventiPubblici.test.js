import request from 'supertest';
import { connect, connection } from 'mongoose';
import app, { locals } from '../app.js';
import evPub from '../collezioni/eventPublic.js';
import createToken from '../tokenCreation.js';

describe("POST /api/v2/EventiPubblici", () => {
    beforeAll(async () => {
        jest.setTimeout(8000);
        locals.db = connect(process.env.DB_URL_TEST);
    });
    afterAll(async () => {
        await evPub.deleteMany({});
        connection.close(true);
    });

    // create a valid token
    var token = createToken("marco.villa@gmail.com", "62e1667818bfa6ca7793fdeb", 86400);

    var picPayload = ""

    test("POST /api/v2/EventiPubblici con utente autenticato e tutti i campi obbligatori compilati correttamente", () => {
        jest.setTimeout(8000);
        return request(app)
        .post('/api/v2/EventiPubblici')
        .set('x-access-token', token)
        .set('Accept', 'application/json')
        .send({
            data: ["11-11-2024"],
            durata: 2,
            descrizione: "ciao",
            ora: "11:00",
            maxPers: 200,
            categoria: "Sport",
            nomeAtt: "Girare a vuoto",
            luogoEv: {
                indirizzo: "Via del campo",
                citta: "Mortara"
            },
            eventPic: picPayload,
            etaMin: 12,
            etaMax: 14
        })
        .expect(201);
    });

    test("POST /api/v2/EventiPubblici con utente non autenticato", () => {
        return request(app)
        .post('/api/v2/EventiPubblici')
        .set('x-access-token', '')
        .set('Accept', 'application/json')
        .send({
            data: ["11-11-2022"],
            ora: "11:00",
            descrizione: "ciao",
            luogoEv: {
                indirizzo: "Via del campo",
                citta: "Mortara"
            },
            nomeAtt: "Girare a vuoto 1",
            maxPers: 200,
            categoria: "Spettacolo",
            durata: 2,
            eventPic: picPayload
        })
        .expect(401, {success: false, message: 'fallita autenticazione'});
    });

    test("POST /api/v2/EventiPubblici con utente autenticato e campo durata compilato con valore non numerico", () => {
        return request(app)
        .post('/api/v2/EventiPubblici')
        .set('x-access-token', token)
        .set('Accept', 'application/json')
        .send({
            data: ["11-11-2022"],
            ora: "11:00",
            descrizione: "ciao",
            luogoEv: {
                indirizzo: "Via del campo",
                citta: "Mortara"
            },
            nomeAtt: "Girare a vuoto 2",
            maxPers: 200,
            categoria: "Manifestazione",
            durata: "2 giorni",
            eventPic: picPayload
        })
        .expect(400, {error: "Campo vuoto o indefinito o non del formato corretto."});
    });

    test("POST /api/v2/EventiPubblici con utente autenticato e campo durata compilato con valore numerico negativo", () => {
        return request(app)
        .post('/api/v2/EventiPubblici')
        .set('x-access-token', token)
        .set('Accept', 'application/json')
        .send({
            data: ["11-11-2022"],
            ora: "11:00",
            descrizione: "ciao",
            luogoEv: {
                indirizzo: "Via del campo",
                citta: "Mortara"
            },
            nomeAtt: "Girare a vuoto 2",
            maxPers: 200,
            categoria: "Viaggio",
            durata: -20,
            eventPic: picPayload
        })
        .expect(400, {error: "Campo vuoto o indefinito o non del formato corretto."});
    });

    test("POST /api/v2/EventiPubblici con utente autenticato e campo durata compilato con valore nullo", () => {
        return request(app)
        .post('/api/v2/EventiPubblici')
        .set('x-access-token', token)
        .set('Accept', 'application/json')
        .send({
            data: ["11-11-2022"],
            ora: "11:00",
            descrizione: "ciao",
            luogoEv: {
                indirizzo: "Via del campo",
                citta: "Mortara"
            },
            nomeAtt: "Girare a vuoto 2",
            maxPers: 200,
            categoria: "Altro",
            durata: 0,
            eventPic: picPayload
        })
        .expect(400, {error: "Campo vuoto o indefinito o non del formato corretto."});
    });

    test("POST /api/v2/EventiPubblici con utente autenticato e campo maxPers compilato con valore non numerico", () => {
        return request(app)
        .post('/api/v2/EventiPubblici')
        .set('x-access-token', token)
        .set('Accept', 'application/json')
        .send({
            data: ["11-11-2022"],
            ora: "11:00",
            descrizione: "ciao",
            luogoEv: {
                indirizzo: "Via del campo",
                citta: "Mortara"
            },
            nomeAtt: "Girare a vuoto 3",
            maxPers: "200 persone",
            categoria: "Sport",
            durata: 2,
            eventPic: picPayload
        })
        .expect(400, {error: "Campo vuoto o indefinito o non del formato corretto."});
    });

    test("POST /api/v2/EventiPubblici con utente autenticato e campo maxPers compilato con valore numerico negativo", () => {
        return request(app)
        .post('/api/v2/EventiPubblici')
        .set('x-access-token', token)
        .set('Accept', 'application/json')
        .send({
            data: ["11-11-2022"],
            ora: "11:00",
            descrizione: "ciao",
            luogoEv: {
                indirizzo: "Via del campo",
                citta: "Mortara"
            },
            nomeAtt: "Girare a vuoto 3",
            maxPers: -200,
            categoria: "Spettacolo",
            durata: 2,
            eventPic: picPayload
        })
        .expect(400, {error: "Campo vuoto o indefinito o non del formato corretto."});
    });

    test("POST /api/v2/EventiPubblici con utente autenticato e campo maxPers compilato con valore nullo", () => {
        return request(app)
        .post('/api/v2/EventiPubblici')
        .set('x-access-token', token)
        .set('Accept', 'application/json')
        .send({
            data: ["11-11-2022"],
            ora: "11:00",
            descrizione: "ciao",
            luogoEv: {
                indirizzo: "Via del campo",
                citta: "Mortara"
            },
            nomeAtt: "Girare a vuoto 3",
            maxPers: 0,
            categoria: "Manifestazione",
            durata: 2,
            eventPic: picPayload
        })
        .expect(400, {error: "Campo vuoto o indefinito o non del formato corretto."});
    });

    test("POST /api/v2/EventiPubblici con utente autenticato e campo maxPers compilato con valore 1", () => {
        return request(app)
        .post('/api/v2/EventiPubblici')
        .set('x-access-token', token)
        .set('Accept', 'application/json')
        .send({
            data: ["11-11-2022"],
            ora: "11:00",
            descrizione: "ciao",
            luogoEv: {
                indirizzo: "Via del campo",
                citta: "Mortara"
            },
            nomeAtt: "Girare a vuoto 3",
            maxPers: 1,
            categoria: "Viaggio",
            durata: 2,
            eventPic: picPayload
        })
        .expect(400, {error: "Campo vuoto o indefinito o non del formato corretto."});
    });

    test("POST /api/v2/EventiPubblici con utente autenticato e campo 'data' non compilato", () => {
        return request(app)
        .post('/api/v2/EventiPubblici')
        .set('x-access-token', token)
        .set('Accept', 'application/json')
        .send({
            ora: "11:00",
            descrizione: "ciao",
            luogoEv: {
                indirizzo: "Via del campo",
                citta: "Mortara"
            },
            nomeAtt: "Girare a vuoto 4",
            maxPers: 20,
            categoria: "Altro",
            durata: 2,
            eventPic: picPayload
        })
        .expect(400, {error: "Date ripetute o nessuna data inserita."});
    });

    test("POST /api/v2/EventiPubblici con utente autenticato e campo 'data' compilato inserendo più volte la stessa data", () => {
        return request(app)
        .post('/api/v2/EventiPubblici')
        .set('x-access-token', token)
        .set('Accept', 'application/json')
        .send({
            data: ["11-11-2022","07-08-2024","07-09-2023","11-11-2022","12-12-2022"],
            ora: "11:00",
            descrizione: "ciao",
            luogoEv: {
                indirizzo: "Via del campo",
                citta: "Mortara"
            },
            nomeAtt: "Girare a vuoto 4",
            maxPers: 20,
            categoria: "Sport",
            durata: 2,
            eventPic: picPayload
        })
        .expect(400, {error: "Date ripetute o nessuna data inserita."});
    });

    test("POST /api/v2/EventiPubblici con utente autenticato e campo 'data' compilato inserendo almeno una data non conforme al formato 'mese/gorno/anno'", () => {
        return request(app)
        .post('/api/v2/EventiPubblici')
        .set('x-access-token', token)
        .set('Accept', 'application/json')
        .send({
            data: ["13-06-2022"],
            ora: "11:00",
            descrizione: "ciao",
            luogoEv: {
                indirizzo: "Via del campo",
                citta: "Mortara"
            },
            nomeAtt: "Girare a vuoto 4",
            maxPers: 20,
            categoria: "Spettacolo",
            durata: 2,
            eventPic: picPayload
        })
        .expect(400, {error: "Formato data o ora non valido"});
    });

    test("POST /api/v2/EventiPubblici con utente autenticato e campo 'data' compilato inserendo una data antecedente a quella corrente", () => {
        return request(app)
        .post('/api/v2/EventiPubblici')
        .set('x-access-token', token)
        .set('Accept', 'application/json')
        .send({
            data: ["02-06-2022"],
            ora: "11:00",
            descrizione: "ciao",
            luogoEv: {
                indirizzo: "Via del campo",
                citta: "Mortara"
            },
            nomeAtt: "Girare a vuoto 4",
            maxPers: 20,
            categoria: "Manifestazione",
            durata: 2,
            eventPic: picPayload
        })
        .expect(403, {error: "giorno o ora non disponibile"});
    });

    test("POST /api/v2/EventiPubblici con utente autenticato e campo 'indirizzo' non compilato", () => {
        return request(app)
        .post('/api/v2/EventiPubblici')
        .set('x-access-token', token)
        .set('Accept', 'application/json')
        .send({
            data: ["11-11-2022"],
            ora: "11:00",
            descrizione: "ciao",
            luogoEv: {
                citta: "Mortara"
            },
            nomeAtt: "Girare a vuoto 4",
            maxPers: 20,
            categoria: "Viaggio",
            durata: 2,
            eventPic: picPayload
        })
        .expect(400, {error: "Campo vuoto o indefinito o non del formato corretto."});
    });

    test("POST /api/v2/EventiPubblici con utente autenticato e campo 'citta' non compilato", () => {
        return request(app)
        .post('/api/v2/EventiPubblici')
        .set('x-access-token', token)
        .set('Accept', 'application/json')
        .send({
            data: ["11-11-2022"],
            ora: "11:00",
            descrizione: "ciao",
            luogoEv: {
                indirizzo: "Via del campo",
            },
            nomeAtt: "Girare a vuoto 4",
            maxPers: 20,
            categoria: "Altro",
            durata: 2,
            eventPic: picPayload
        })
        .expect(400, {error: "Campo vuoto o indefinito o non del formato corretto."});
    });

    test("POST /api/v2/EventiPubblici con utente autenticato e campo 'indirizzo' compilato come stringa vuota", () => {
        return request(app)
        .post('/api/v2/EventiPubblici')
        .set('x-access-token', token)
        .set('Accept', 'application/json')
        .send({
            data: ["11-11-2022"],
            ora: "11:00",
            descrizione: "ciao",
            luogoEv: {
                indirizzo: "",
                citta: "Mortara"
            },
            nomeAtt: "Girare a vuoto 4",
            maxPers: 20,
            categoria: "Sport",
            durata: 2,
            eventPic: picPayload
        })
        .expect(400, {error: "Campo vuoto o indefinito o non del formato corretto."});
    });

    test("POST /api/v2/EventiPubblici con utente autenticato e campo 'ora' compilato in formato diverso da hh:mm", () => {
        return request(app)
        .post('/api/v2/EventiPubblici')
        .set('x-access-token', token)
        .set('Accept', 'application/json')
        .send({
            data: ["11-11-2022"],
            ora: "11|00",
            descrizione: "ciao",
            luogoEv: {
                indirizzo: "Via del campo",
                citta: "Mortara"
            },
            nomeAtt: "Girare a vuoto 4",
            maxPers: 20,
            categoria: "Spettacolo",
            durata: 2,
            eventPic: picPayload
        })
        .expect(400, {error: "Formato data o ora non valido"});
    });

    let dateObj = new Date();
    test("POST /api/v2/EventiPubblici con utente autenticato e campo 'ora' compilato con un orario antecedente all'ora corrente per la data corrente", () => {
        return request(app)
        .post('/api/v2/EventiPubblici')
        .set('x-access-token', token)
        .set('Accept', 'application/json')
        .send({
            data: [String(dateObj.getMonth() + 1).padStart(2, '0') + "-" + String(dateObj.getDate() - 1).padStart(2, '0') + "-" + dateObj.getFullYear()],
            ora: String(dateObj.getHours()).padStart(2, '0') + ":" + String(dateObj.getMinutes() - 1).padStart(2, '0'),
            descrizione: "ciao",
            luogoEv: {
                indirizzo: "Via del campo",
                citta: "Mortara"
            },
            nomeAtt: "Girare a vuoto 4",
            maxPers: 20,
            categoria: "Manifestazione",
            durata: 2,
            eventPic: picPayload
        })
        .expect(403, {error: "giorno o ora non disponibile"});
    });

    test("POST /api/v2/EventiPubblici con utente autenticato e campo 'nomeAtt' non compilato", () => {
        return request(app)
        .post('/api/v2/EventiPubblici')
        .set('x-access-token', token)
        .set('Accept', 'application/json')
        .send({
            data: ["11-11-2022"],
            ora: "11:00",
            descrizione: "ciao",
            luogoEv: {
                indirizzo: "Via del campo",
                citta: "Mortara"
            },
            maxPers: 20,
            categoria: "Viaggio",
            durata: 2,
            eventPic: picPayload
        })
        .expect(400, {error: "Campo vuoto o indefinito o non del formato corretto."});
    });

    test("POST /api/v2/EventiPubblici con utente autenticato e campo 'categoria' non compilato", () => {
        return request(app)
        .post('/api/v2/EventiPubblici')
        .set('x-access-token', token)
        .set('Accept', 'application/json')
        .send({
            data: ["11-11-2022"],
            ora: "11:00",
            descrizione: "ciao",
            luogoEv: {
                indirizzo: "Via del campo",
                citta: "Mortara"
            },
            nomeAtt: "Girare a vuoto 4",
            maxPers: 20,
            durata: 2,
            eventPic: picPayload
        })
        .expect(400, {error: "Campo vuoto o indefinito o non del formato corretto."});
    });
    test("POST /api/v2/EventiPubblici con utente autenticato e campo descrizione non compilato", () => {
        jest.setTimeout(8000);
        return request(app)
        .post('/api/v2/EventiPubblici')
        .set('x-access-token', token)
        .set('Accept', 'application/json')
        .send({
            data: ["11-11-2024"],
            durata: 2,
            ora: "11:00",
            maxPers: 200,
            categoria: "Sport",
            nomeAtt: "Girare a vuoto",
            luogoEv: {
                indirizzo: "Via del campo",
                citta: "Mortara"
            },
            eventPic: picPayload
        })
        .expect(400, {error: "Campo vuoto o indefinito o non del formato corretto."});
    });
    test("POST /api/v2/EventiPubblici con utente autenticato e campo descrizione compilato come stringa vuota", () => {
        jest.setTimeout(8000);
        return request(app)
        .post('/api/v2/EventiPubblici')
        .set('x-access-token', token)
        .set('Accept', 'application/json')
        .send({
            data: ["11-11-2024"],
            durata: 2,
            descizione: "",
            ora: "11:00",
            maxPers: 200,
            categoria: "Sport",
            nomeAtt: "Girare a vuoto",
            luogoEv: {
                indirizzo: "Via del campo",
                citta: "Mortara"
            },
            eventPic: picPayload
        })
        .expect(400, {error: "Campo vuoto o indefinito o non del formato corretto."});
    });
    test("POST /api/v2/EventiPubblici con utente autenticato e campo descrizione compilato con lunghezza superiore al massimo consentito", () => {
        jest.setTimeout(8000);
        return request(app)
        .post('/api/v2/EventiPubblici')
        .set('x-access-token', token)
        .set('Accept', 'application/json')
        .send({
            data: ["11-11-2024"],
            durata: 2,
            descrizione: picPayload,
            ora: "11:00",
            maxPers: 200,
            categoria: "Sport",
            nomeAtt: "Girare a vuoto",
            luogoEv: {
                indirizzo: "Via del campo",
                citta: "Mortara"
            },
            eventPic: picPayload
        })
        .expect(400, {error: "Campo vuoto o indefinito o non del formato corretto."});
    });
});